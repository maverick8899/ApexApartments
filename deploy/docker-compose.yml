services:
    db:
        image: mysql:8.0.33-oracle
        container_name: db
        ports:
            - '3307:3306' #/ '3306:3306'
        networks:
            - webapp
        volumes:
            - dbdata:/var/lib/mysql
            - .docker/database/:/docker-entrypoint-initdb.d/
            # - ../.docker/database/config:/etc/mysql/conf.d
        # command: mysql -u root -proot -e "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''))"
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: apartments
            # MYSQL_INIT_COMMAND: "SET GLOBAL sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));"

    backend:
        # image: maverick0809/tomcat:8.5.100-ubuntu-22.04-java11  #? just tomcat for bind mount
        image: maverick0809/apartment-backend:8.5.100-ubuntu-22.04-java11
        container_name: backend
        ports:
            - '8081:8080'
        restart: unless-stopped
        networks:
            - webapp
        # volumes:
        # - ../backend/target/:/opt/tomcat/webapps
        # - ./webapps:/opt/tomcat/webapps
        depends_on: [db, traefik]
        labels:
            - 'traefik.enable=true'
            #/ backend
            # - 'traefik.http.routers.backend.rule=Host(`app.devops.online`)' #? domain or pass across header
            - 'traefik.http.routers.backend.rule=Host(`backend.localhost`)' #? domain or pass across header
            - 'traefik.http.routers.backend.service=backend' #? auto-generated
            - 'traefik.http.routers.backend.entrypoints=web' #? port 80
            # - 'traefik.http.routers.backend.middlewares=test-redirectscheme'

            #/ backend-secure
            # - 'traefik.http.routers.backend-secure.rule=Host(`app.devops.online`)' #? domain or pass across header
            # - 'traefik.http.routers.backend-secure.entrypoints=websecure' #? port 443 for tls
            # - 'traefik.http.routers.backend-secure.tls.certresolver=myresolver' #? tls configuration
            # - 'traefik.http.routers.backend-secure.middlewares=basic-auth, test-compress, test-errorpages,test-ratelimit'

            #* Services
            - 'traefik.http.services.backend.loadbalancer.server.port=8080' #? auto-generated
            - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
            - 'traefik.http.middlewares.test-errorpages.errors.service=error'
            - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
            - 'traefik.http.middlewares.test-compress.compress=true'
            - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5' #? 2reqs / 1second

            #* 5 Redirect Scheme HTTP -> HTTPS  (Moved Permanently : 301) zalo
            # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
            # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'

    frontend:
        # build:
        #     context: ./frontend
        #     dockerfile: Dockerfile
        image: maverick0809/apartment-frontend
        restart: unless-stopped
        container_name: frontend
        ports:
            - '3000:80'
        # volumes:
        # - ../../frontend:/app/:ro
        # - ../../frontend/nginx.conf:/etc/nginx/nginx.conf
        networks: #? react chỉ giao tiếp đến backend
            - webapp
        labels:
            - 'traefik.enable=true'
            #* Routers
            #/ frontend
            # - 'traefik.http.routers.frontend.rule=Host(`app.devops.online`)' #? domain or pass across header
            - 'traefik.http.routers.frontend.rule=Host(`frontend.localhost`)' #? domain or pass across header
            - 'traefik.http.routers.frontend.service=frontend' #? auto-generated
            - 'traefik.http.routers.frontend.entrypoints=web' #? port 80
            # - 'traefik.http.routers.frontend.middlewares=test-redirectscheme'

            #/ frontend-secure
            # - 'traefik.http.routers.frontend-secure.rule=Host(`app.devops.online`)' #? domain or pass across header
            # - 'traefik.http.routers.frontend-secure.entrypoints=websecure' #? port 443 for tls
            # - 'traefik.http.routers.frontend-secure.tls.certresolver=myresolver' #? tls configuration
            # - 'traefik.http.routers.frontend-secure.middlewares=basic-auth, test-compress, test-errorpages,test-ratelimit'

            #* Services
            - 'traefik.http.services.frontend.loadbalancer.server.port=80' #? auto-generated

            #@ Middleware
            #* 1 BasicAuth Middleware
            # - "traefik.http.middlewares.basic-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
            # #?  remove the authorization header before forwarding the request to your service
            # - 'traefik.http.middlewares.test-auth.basicauth.removeheader=true'
            # user1: traefik password: training
            # user2: user2 password: test123
            # Create hash password -> echo $(htpasswd -nb user2 test123) | sed -e s/\\$/\\$\\$/g

            #* 2 Compress Middleware
            - 'traefik.http.middlewares.test-compress.compress=true'

            #* 3 Error Pages Middleware
            #? definition error code
            - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
            #? specify service will resolve when get error
            - 'traefik.http.middlewares.test-errorpages.errors.service=error'
            #?  mapping error code to code.html (Ex: 404 -> 404.html)
            - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'

            #* 4 Rate Limit Middleware
            - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=2' #? 2reqs / 1second

            #* 5 Redirect Scheme HTTP -> HTTPS  (Moved Permanently : 301) zalo
            # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
            # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'
        # healthcheck:
        #     test: ['CMD', 'curl', '-f', 'http://localhost']
        #     interval: 200s
        #     timeout: 200s
        #     retries: 5
        depends_on:
            - backend
    error:
        image: guillaumebriday/traefik-custom-error-pages
        container_name: gateway-error-pages
        networks:
            - webapp
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.error.rule=Host(`error.localhost`)'
            - 'traefik.http.routers.error.service=error'
            - 'traefik.http.services.error.loadbalancer.server.port=80' #? default
            - 'traefik.http.routers.error.entrypoints=web'
    traefik:
        image: traefik:v3.0
        container_name: gateway
        #* use traefik.yml instead
        # command:
        #     - '--api.insecure=true'
        #     - '--providers.docker'
        #     - '--log.level=INFO'
        #? the same compare to above
        environment:
            #   - TRAEFIK_API_INSECURE=true
            #   - TRAEFIK_PROVIDERS_DOCKER=true
            #   - TRAEFIK_LOG_LEVEL=INFO
            #? use it for dnsChallege
            #* digital-ocean
            # - 'DO_AUTH_TOKEN=<Your Super Secret Digital Ocean Token Goes here>'
            #* aws: router 53
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_REGION=${AWS_REGION}
            - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
        ports:
            - '80:80'
            - '443:443'
            - '8080:8080'
        networks:
            - traefik
            - webapp
        volumes:
            #? So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock
            # Copies the Let's Encrypt certificate locally for ease of backing up
            - ./letsencrypt:/letsencrypt
              # Mounts the Traefik static configuration inside the Traefik container
            - ./traefik/traefik.yml:/etc/traefik/traefik.yml
            - ./logs:/var/log/traefik/
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck']
            interval: 10s
            timeout: 2s
            retries: 3
            start_period: 5s

    prometheus:
        image: prom/prometheus:v2.52.0
        container_name: prometheus
        networks:
            - webapp
        volumes:
            - ./prometheus/:/etc/prometheus/
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)'
            - 'traefik.http.routers.prometheus.service=prometheus'
            - 'traefik.http.routers.prometheus.entrypoints=web'
            - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
            - 'traefik.docker.network=webapp'
        restart: on-failure

    grafana:
        image: grafana/grafana:7.3.1
        container_name: grafana
        networks:
            - webapp
        ports:
            - '3003:3000'
        depends_on:
            - prometheus
        volumes:
            - grafana_data:/var/lib/grafana
            - ./grafana/provisioning/:/etc/grafana/provisioning/
        env_file:
            - ./grafana/config.monitoring
        user: '104'
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.grafana.rule=Host(`grafana.localhost`)'
            - 'traefik.http.routers.grafana.service=grafana'
            - 'traefik.http.routers.grafana.entrypoints=web'
            - 'traefik.http.services.grafana.loadbalancer.server.port=3000'
            - 'traefik.docker.network=webapp'
        restart: on-failure
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
        networks:
            - webapp
        ports:
            - '9200:9200'
        container_name: elasticsearch
        environment:
            - ELASTIC_PASSWORD=myelasticpass
            - KIBANA_PASSWORD=kibanapass
            - discovery.type=single-node
            - xpack.security.http.ssl.enabled=false
            - cluster.routing.allocation.disk.threshold_enabled=false
            # - xpack.security.enabled=true
            # - xpack.security.authc.api_key.enabled=true
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.localhost`)'
            - 'traefik.http.routers.elasticsearch.service=elasticsearch'
            - 'traefik.http.routers.elasticsearch.entrypoints=web'
            - 'traefik.http.services.elasticsearch.loadbalancer.server.port=9200'
            - 'traefik.docker.network=webapp'
        # restart: on-failure
        volumes:
            - ./elk/data:/usr/share/elasticsearch/data
    logstash:
        image: docker.elastic.co/logstash/logstash:7.5.0
        networks:
            - webapp
        container_name: logstash
        volumes:
            - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        environment:
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=myelasticpass
            - ELASTIC_HOSTS=http://elasticsearch:9200
            - XPACK_MONITORING_ELASTICSEARCH_HOSTS=[ "http://elasticsearch:9200" ]
            # - XPACK_MANAGEMENT_ENABLED=false
            # - XPACK_MANAGEMENT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            # - XPACK_MANAGEMENT_ELASTICSEARCH_USERNAME=elastic
            # - XPACK_MANAGEMENT_ELASTICSEARCH_PASSWORD=myelasticpass
            # - XPACK_MONITORING_ENABLED=true
            # - XPACK_MONITORING_ELASTICSEARCH_SSL_VERIFICATION_MODE=none  
        depends_on:
            - elasticsearch
        # restart: on-failure
    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.3
        networks:
            - webapp
        container_name: kibana
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=kibanapass
        ports:
            - '5601:5601'
        depends_on:
            - elasticsearch
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.kibana.rule=Host(`kibana.localhost`)'
            - 'traefik.http.routers.kibana.service=kibana'
            - 'traefik.http.routers.kibana.entrypoints=web'
            - 'traefik.http.services.kibana.loadbalancer.server.port=5601'
            - 'traefik.docker.network=webapp'
        # restart: on-failure
    filebeat:
        image: docker.elastic.co/beats/filebeat:7.17.3
        container_name: filebeat
        networks:
            - webapp
        command: filebeat -e -strict.perms=false
        volumes:
            - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml
            - ./logs:/var/log/server
        # restart: on-failure
        
networks:
    traefik:
        driver: bridge
        external: true
    webapp:
        driver: bridge
        external: true

volumes:
    dbdata: {}
    prometheus_data: {}
    grafana_data: {}
