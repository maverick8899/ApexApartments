services:
    db:
        image: mysql:8.0.33-oracle
        ports:
            - target: 3306
              published: 3307
              mode: host
        networks:
            - webapp
        volumes:
            - dbdata:/var/lib/mysql
            - ./.docker/database/:/docker-entrypoint-initdb.d/
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: apartments
        deploy:
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                # reservations:
                #     cpus: '0.25'
                #     memory: 256M

    backend:
        image: maverick0809/apartment-backend:8.5.100-ubuntu-22.04-java11
        # ports:
        #     - target: 8080
        #       published: 8081
        #       mode: ingress
        networks:
            - webapp
        depends_on: [db, traefik]
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker #?  node.role!=manager
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                reservations:
                    cpus: '0.25'
                    memory: 256M
            update_config:
                parallelism: 2
                delay: 10s
            rollback_config: #? xác định cách xử lý các bản cập nhật dịch vụ không thành công và quay trở lại phiên bản trước đó.
                parallelism: 1 #?  Xác định số lượng tác vụ (tasks) sẽ được quay lại (rollback) song song cùng một lúc.
                failure_action: pause #? nếu có bất kỳ tác vụ nào không thể quay lại thành công, hệ thống sẽ tạm dừng quá trình rollback.
                monitor: 10s #? Nếu tác vụ không ổn định trong khoảng thời gian này, nó sẽ được coi là thất bại.
                max_failure_ratio: 0.3 #? Xác định tỷ lệ tối đa của các tác vụ có thể thất bại trước khi toàn bộ quá trình rollback bị coi là thất bại.
            labels:
                - 'traefik.enable=true'
                # - 'traefik.http.routers.backend.rule=Host(`admin.app.devops.online`)'
                - 'traefik.http.routers.backend.rule=Host(`backend.local`)'
                - 'traefik.http.routers.backend.service=backend' #? auto-generated
                - 'traefik.http.routers.backend.entrypoints=web'
                - 'traefik.http.routers.backend.rule=Host(`backend.local`) && (PathPrefix(`/apartment_manager/`) || PathPrefix(`/`))'
                - 'traefik.http.routers.backend.middlewares=redirect-to-context'

                # - 'traefik.http.routers.backend.middlewares=test-errorpages, test-redirectscheme'
                #* backend-secure
                # - 'traefik.http.routers.backend-secure.rule=Host(`admin.app.devops.online`)'
                # - 'traefik.http.routers.backend-secure.entrypoints=websecure'
                # - 'traefik.http.routers.backend-secure.tls.certresolver=myresolver'
                # - 'traefik.http.routers.backend-secure.middlewares=basic-auth, test-compress, test-errorpages,test-ratelimit'
                #* Services
                - 'traefik.http.services.backend.loadbalancer.server.port=8080'
                - 'traefik.http.middlewares.test-compress.compress=true'
                - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
                - 'traefik.http.middlewares.test-errorpages.errors.service=error'
                - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
                - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5'
                # #* 5 Redirect Scheme HTTP -> HTTPS
                - 'traefik.http.middlewares.redirect-to-context.redirectregex.regex=^/$$'
                - 'traefik.http.middlewares.redirect-to-context.redirectregex.replacement=/apartment_manager/'
                - 'traefik.http.middlewares.redirect-to-context.redirectregex.permanent=true'
                # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
                # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'
    frontend:
        image: maverick0809/apartment-frontend
        # ports:
        #     - target: 80
        #       published: 3000
        #       mode: ingress
        networks: #? react chỉ giao tiếp đến backend
            - webapp
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==worker
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                # reservations:
                #     cpus: '0.25'
                #     memory: 256M
            update_config:
                parallelism: 2
                delay: 10s
            rollback_config:
                parallelism: 1
                failure_action: pause
                monitor: 10s
                max_failure_ratio: 0.3
            labels:
                - 'traefik.enable=true'
                #* Routers
                #/ frontend
                # - 'traefik.http.routers.frontend.rule=Host(`app.devops.online`)'
                - 'traefik.http.routers.frontend.rule=Host(`frontend.local`)'
                - 'traefik.http.routers.frontend.service=frontend' #? auto-generated
                - 'traefik.http.routers.frontend.entrypoints=web' #? port 80
                - 'traefik.http.routers.frontend.middlewares=test-errorpages'
                # - 'traefik.http.routers.frontend.middlewares=test-redirectscheme'
                #* product
                # - 'traefik.http.routers.frontend-secure.rule=Host(`app.devops.online`)'
                # - 'traefik.http.routers.frontend-secure.entrypoints=websecure' #? port 443 for tls
                # - 'traefik.http.routers.frontend-secure.tls.certresolver=myresolver' #? tls configuration
                # - 'traefik.http.routers.frontend-secure.middlewares=test-compress, test-errorpages,test-ratelimit'
                #* Services
                - 'traefik.http.services.frontend.loadbalancer.server.port=80' #? auto-generated
                - 'traefik.http.middlewares.test-compress.compress=true'
                #* 3 Error Pages Middleware
                - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
                - 'traefik.http.middlewares.test-errorpages.errors.service=error'
                - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
                - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5'
                #* product
                # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.scheme=https'
                # - 'traefik.http.middlewares.test-redirectscheme.redirectscheme.permanent=true'
        depends_on:
            - backend
        # volumes:
        #     - ./nginx.conf:/etc/nginx/nginx.conf
    error:
        image: guillaumebriday/traefik-custom-error-pages
        networks:
            - webapp
        deploy:
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.error.rule=Host(`error.local`)'
                - 'traefik.http.routers.error.service=error'
                - 'traefik.http.services.error.loadbalancer.server.port=80' #? default
                - 'traefik.http.routers.error.entrypoints=web'
    traefik:
        image: traefik:v3.0
        #? the same compare to above
        # environment:
        #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        #     - AWS_REGION=${AWS_REGION}
        #     - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
        #     - TRAEFIK_BASIC_AUTH=${TRAEFIK_BASIC_AUTH}
        ports: #? Must be exist, cuz it for routing
            - target: 80
              published: 80
              mode: ingress
            - target: 443
              published: 443
              mode: ingress
            - target: 8080
              published: 8080
              mode: ingress
        networks:
            - traefik
            - webapp
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./letsencrypt:/letsencrypt
            - ./traefik/traefik.dev.yml:/etc/traefik/traefik.yml
            - ./logs:/var/log/traefik/
        healthcheck:
            test: ['CMD', 'traefik', 'healthcheck']
            interval: 10s
            timeout: 2s
            retries: 3
            start_period: 5s
        env_file:
            - ./.env
        deploy:
            replicas: 3 #* up to quantity node manage
            restart_policy:
                condition: on-failure
                delay: 10s
                max_attempts: 3
                window: 120s
            placement:
                constraints:
                    - node.role==manager
            resources:
                limits:
                    cpus: '0.5'
                    memory: 512M
                # reservations:
                #     cpus: '0.25'
                #     memory: 256M
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.dashboard.rule=Host(`traefik.local`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`) || PathPrefix(`/`))'
                - 'traefik.http.routers.dashboard.service=api@internal'
                # - 'traefik.http.routers.dashboard.entrypoints=websecure'
                # - 'traefik.http.routers.dashboard.tls=true'
                # - 'traefik.http.routers.dashboard.tls.certresolver=myresolver'
                - 'traefik.http.routers.dashboard.middlewares=auth, test-errorpages, redirect-to-dashboard'
                - 'traefik.http.middlewares.auth.basicauth.users=maverick:$$apr1$$gNsErkMM$$kk2/6uUv1gEcxnuPBcIdw1' #/ maverick:1
                - 'traefik.http.services.dashboard.loadbalancer.server.port=8080'
                #* 3 Error Pages Middleware
                - 'traefik.http.middlewares.test-errorpages.errors.status=400-599'
                - 'traefik.http.middlewares.test-errorpages.errors.service=error'
                - 'traefik.http.middlewares.test-errorpages.errors.query=/{status}.html'
                - 'traefik.http.middlewares.test-ratelimit.ratelimit.average=5'

                - 'traefik.http.middlewares.redirect-to-dashboard.redirectregex.regex=^/$$'
                - 'traefik.http.middlewares.redirect-to-dashboard.redirectregex.replacement=/dashboard/'
                - 'traefik.http.middlewares.redirect-to-dashboard.redirectregex.permanent=true'
    cadvisor:
        image: gcr.io/cadvisor/cadvisor:v0.47.2
        ports:
            - target: 8080
              published: 8088
              mode: host
        privileged: true
        devices:
            - /dev/kmsg
        networks:
            - webapp
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:ro
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /dev/disk/:/dev/disk:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /etc/machine-id:/etc/machine-id:ro
            - /var/lib/dbus/machine-id:/var/lib/dbus/machine-id:ro
        deploy:
            mode: global
            resources:
                # limits:
                #     memory: 128M
                reservations:
                    memory: 64M
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.cadvisor.rule=Host(`cadvisor.local`)'
                - 'traefik.http.routers.cadvisor.service=cadvisor'
                - 'traefik.http.routers.cadvisor.entrypoints=web'
                - 'traefik.http.services.cadvisor.loadbalancer.server.port=8080'
                - 'traefik.docker.network=webapp'
            placement:
                constraints:
                    - node.role==manager
            restart_policy:
                condition: on-failure

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
        networks:
            - webapp
        ports:
            - target: 9200
              published: 9200
              mode: host
        environment:
            - ELASTIC_PASSWORD=myelasticpass
            - KIBANA_PASSWORD=kibanapass
            - discovery.type=single-node
            - xpack.security.http.ssl.enabled=false
            - cluster.routing.allocation.disk.threshold_enabled=false
            # - xpack.security.enabled=true
            # - xpack.security.authc.api_key.enabled=true
        deploy:
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.elasticsearch.rule=Host(`elasticsearch.local`)'
                - 'traefik.http.routers.elasticsearch.service=elasticsearch'
                - 'traefik.http.routers.elasticsearch.entrypoints=web'
                - 'traefik.http.services.elasticsearch.loadbalancer.server.port=9200'
                - 'traefik.docker.network=webapp'
            placement: #? vị trí place prometheus đặt trên node master
                constraints:
                    - node.role==manager
            restart_policy:
                condition: on-failure
        # restart: on-failure
        volumes:
            - ./elk/data:/usr/share/elasticsearch/data
    logstash:
        image: docker.elastic.co/logstash/logstash:7.5.0
        networks:
            - webapp
        volumes:
            - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        environment:
            - ELASTIC_USER=elastic
            - ELASTIC_PASSWORD=myelasticpass
            - ELASTIC_HOSTS=http://elasticsearch:9200
            - XPACK_MONITORING_ELASTICSEARCH_HOSTS=[ "http://elasticsearch:9200" ]
            # - XPACK_MANAGEMENT_ENABLED=false
            # - XPACK_MANAGEMENT_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            # - XPACK_MANAGEMENT_ELASTICSEARCH_USERNAME=elastic
            # - XPACK_MANAGEMENT_ELASTICSEARCH_PASSWORD=myelasticpass
            # - XPACK_MONITORING_ENABLED=true
            # - XPACK_MONITORING_ELASTICSEARCH_SSL_VERIFICATION_MODE=none
        deploy:
            placement: #? vị trí place prometheus đặt trên node master
                constraints:
                    - node.role==manager
        depends_on:
            - elasticsearch
    kibana:
        image: docker.elastic.co/kibana/kibana:7.17.3
        networks:
            - webapp
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
            - ELASTICSEARCH_USERNAME=kibana_system
            - ELASTICSEARCH_PASSWORD=kibanapass
        ports:
            - target: 5601
              published: 5601
              mode: host
        depends_on:
            - elasticsearch
        deploy:
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.kibana.rule=Host(`kibana.local`)'
                - 'traefik.http.routers.kibana.service=kibana'
                - 'traefik.http.routers.kibana.entrypoints=web'
                - 'traefik.http.services.kibana.loadbalancer.server.port=5601'
                - 'traefik.docker.network=webapp'
            placement: #? vị trí place prometheus đặt trên node master
                constraints:
                    - node.role==manager
            restart_policy:
                condition: on-failure
    # portainer:
    #     image: portainer/portainer-ce:alpine-sts
    #     networks:
    #         - webapp
    #     ports:
    #         - target: 9000
    #           published: 9999
    #           mode: host
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock
    #         - portainer_data:/data
    #     deploy:
    #         replicas: 1
    #         labels:
    #             - 'traefik.enable=true'
    #             - 'traefik.http.routers.portainer.rule=Host(`portainer.local`)'
    #             - 'traefik.http.routers.portainer.service=portainer'
    #             - 'traefik.http.routers.portainer.entrypoints=web'
    #             - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
    #             - 'traefik.docker.network=webapp'
    #         placement: #? vị trí place prometheus đặt trên node master
    #             constraints:
    #                 - node.role==manager
    #         restart_policy:
    #             condition: on-failure
    filebeat:
        image: docker.elastic.co/beats/filebeat:7.17.3
        networks:
            - webapp
        command: filebeat -e -strict.perms=false
        volumes:
            - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml
            - ./logs:/var/log/server
    agent:
        image: portainer/agent:2.19.5
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
            - traefik
            - webapp
        deploy:
            mode: global
            # placement:
            #     constraints: [node.platform.os == linux]

    portainer:
        image: portainer/portainer-ee:2.19.5
        command: -H tcp://tasks.agent:9001 --tlsskipverify
        # ports:
        #     - '9443:9443'
        #     - '9000:9000'
        #     - '8000:8000'
        volumes:
            - portainer_data:/data
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]
            labels:
                - 'traefik.enable=true'
                - 'traefik.http.routers.portainer.rule=Host(`portainer.local`)'
                - 'traefik.http.routers.portainer.service=portainer'
                - 'traefik.http.routers.portainer.entrypoints=web'
                - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
                - 'traefik.docker.network=webapp'
networks:
    traefik:
        driver: overlay
        external: true
    webapp:
        driver: overlay
        external: true

volumes:
    dbdata: {}
    portainer_data:
